<UserControl x:Class="ExampleWPF.Views.ControlDefinitionsTab"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:ExampleWPF"
             mc:Ignorable="d" 
            xmlns:Behaviors="clr-namespace:RFBCodeWorks.WPF.Behaviors;assembly=RFBCodeWorks.Mvvm.Controls"
            xmlns:Interactions="http://schemas.microsoft.com/xaml/behaviors"
            xmlns:Views="clr-namespace:ExampleWPF.Views"
            xmlns:ViewModels="clr-namespace:ExampleWPF.ViewModels"
            d:DataContext="{d:DesignInstance Type=local:MainViewModel, IsDesignTimeCreatable=True}"
            xmlns:md="clr-namespace:MvvmDialogs;assembly=MvvmDialogs"
            d:DesignHeight="450" d:DesignWidth="800">
    <StackPanel Background="BurlyWood">
        <GroupBox Header="File Drag and Drop Handler" 
                  Behaviors:DragAndDrop.FileDropHandler="{Binding DragDropHandler}"
                  >
            <Grid>
                <StackPanel>
                    <TextBlock Text="File Name: " />
                    <TextBox Text="{Binding DragDropHandler.FileName}" />
                    <TextBlock Text="File Size: " />
                    <TextBox Text="{Binding DragDropHandler.FileSize, Mode=OneWay}" />
                    <TextBlock Text="Directory Path: " />
                    <TextBox Text="{Binding DragDropHandler.DirectoryPath}" />
                </StackPanel>
                <!-- 
                Create a Transparant Rectangle that takes up the entire grid size, but by default is not hit test visible.
                When a file is being dragged over the grid, the PreviewDrag event wil set IsHitTestVisible property, thereby allowing the entire grid to act as the drop zone.
                Without this setup, the file would not be allowed to be dropped since textboxes do not allow dropping files onto them.
                -->
                <Rectangle Fill="Transparent" IsHitTestVisible="{Binding DragDropHandler.IsHitTestVisible, FallbackValue=False}"/>
            </Grid>
        </GroupBox>
        <GroupBox Header="Button Definition">
            <StackPanel>
                <TextBlock Text="The button below should have its content and tooltip specified by the xaml"/>
                <Button 
                    Content="This Button Content is specified in XAML"
                    ToolTip="This Button Tooltip is specified in XAML"
                    Behaviors:ControlDefinitions.ButtonDefinition="{Binding ButtonContentTest}"
                    />
                <TextBlock Height="10"/>
                <TextBlock Text="The button below should have its content and tooltip specified by the bound ButtonDefinition"/>
                <Button Behaviors:ControlDefinitions.ButtonDefinition="{Binding ButtonContentTest}"/>
            </StackPanel>
        </GroupBox>
    </StackPanel>
</UserControl>
