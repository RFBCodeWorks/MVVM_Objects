using System;
using System.Windows;

namespace RFBCodeWorks.MvvmControls.Behaviors
{
    //https://stackoverflow.com/a/26032796/12135042


    /// <summary>
    /// Interface that can be used to send a signal from the View to the ViewModel that the window is closing
    /// </summary>
    public interface IWindowClosingHandler
    {
        /// <summary>
        /// Executes when window is closing
        /// </summary>
        void OnWindowClosing(object sender, System.ComponentModel.CancelEventArgs e);

        /// <summary>
        /// Occurs when the window has closed
        /// </summary>
        void OnWindowClosed(object sender, EventArgs e);

    }

    /// <summary>
    /// ViewModel Interface that can be used to perform an action when the View is loading
    /// </summary>
    public interface IWindowLoadingHandler
    {
        /// <summary>
        /// Executes after a window has Loaded, but before content is rendered
        /// </summary>
        void OnWindowLoaded(object sender, EventArgs e);

        /// <summary>
        /// Executes after the content of a window has rendered for the first time
        /// </summary>
        void OnWindowContentRendered(object sender, EventArgs e);
    }

    /// <summary>
    /// Interface that can be used to send a signal from the View to the ViewModel that the window has Loaded
    /// </summary>
    public interface IWindowActivatedHandler
    {
        /// <summary>
        /// Action to take when the window is activated by the user
        /// <br/><see cref="Window.Activated"/>
        /// </summary>
        /// <param name="sender">The <see cref="Window"/> that was activated</param>
        /// <param name="e">The <see cref="EventArgs"/> generated by the <paramref name="sender"/></param>
        void OnWindowActivated(object sender, EventArgs e);

        /// <summary>
        /// Action to take when the window is deactivated by the user
        /// <br/><see cref="Window.Deactivated"/>
        /// </summary>
        /// <param name="sender">The <see cref="Window"/> that was deactivated</param>
        /// <param name="e">The <see cref="EventArgs"/> generated by the <paramref name="sender"/></param>
        void OnWindowDeactivated(object sender, EventArgs e);

    }

    /// <summary>
    /// Interface that is used when to interact with a UIElement when it gains/loses logical focus
    /// </summary>
    public interface IWindowFocusHandler
    {
        /// <summary>
        /// React to a UIElement gaining focus. 
        /// <br/> <see cref="UIElement.GotFocus"/>
        /// </summary>
        /// <param name="sender">The event sender - this should be a <see cref="UIElement"/></param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> generated by the <paramref name="sender"/></param>
        void OnUIElementGotFocus(object sender, EventArgs e);

        /// <summary>
        /// React to a UIElement losing focus. 
        /// <br/> <see cref="UIElement.LostFocus"/>
        /// </summary>
        /// <param name="sender">The event sender - this should be a <see cref="UIElement"/></param>
        /// <param name="e">The <see cref="RoutedEventArgs"/> generated by the <paramref name="sender"/></param>
        void OnUIElementLostFocus(object sender, EventArgs e);
    }
}
